os: linux
group: edge

addons:
    apt:
        packages:
          - libdbus-1-dev
          - libudev-dev
          - libdbus-glib-1-dev
          - python3-pyudev

language: rust

matrix:
    fast_finish: true
    allow_failures:
        # Allow audit task to fail
        - env: TASK=audit
    include:

        # MANDATORY CHECKS USING CURRENT DEVELOPMENT COMPILER
        - name: "format Rust source using current development toolchain"
          rust: 1.40.0
          before_script:
              - rustup component add rustfmt
          env: TASK=fmt-travis
        - name: "lint Rust source using current development toolchain"
          rust: 1.40.0
          before_script:
              - rustup component add clippy
          env: TASK=clippy

        # MANDATORY TESTING USING LOWEST SUPPORTED COMPILER
        - name: "run Rust unit tests on lowest supported toolchain"
          rust: 1.39.0
          env: TASK=test
        - name: "build release on lowest supported toolchain"
          rust: 1.39.0
          env: TASK=release


        # MANDATORY TESTING ON STABLE
        - name: "build using stable toolchain"
          rust: stable
          env: TASK=build TARGET=x86_64-unknown-linux-gnu
        - name: "build without defaults using stable toolchain"
          rust: stable
          env: TASK=build-no-default TARGET=x86_64-unknown-linux-gnu
        - name: "build Rust source on a 32-bit system using stable toolchain"
          rust: stable
          env: TASK=build TARGET=i686-unknown-linux-gnu PKG_CONFIG_ALLOW_CROSS=1 PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig/
          install:
            - rustup target add $TARGET
            - sudo dpkg --add-architecture i386
            - sudo apt-get update
            - sudo apt-get install -y gcc-multilib libdbus-1-dev:i386 libdbus-glib-1-dev:i386 libglib2.0-dev:i386 libudev-dev:i386
        - name: "build Rust docs using stable toolchain"
          rust: stable
          env: TASK=docs-travis
        - name: "run Rust unit tests using stable toolchain"
          rust: stable
          env: TASK=test
        - name: "run Rust destructive unit tests using stable toolchain"
          rust: stable
          sudo: required
          script: sudo PATH=${TRAVIS_HOME}/.cargo/bin:$PATH make -f Makefile test-travis
        - name: "build release using stable toolchain"
          rust: stable
          env: TASK=release


        # MANDATORY PYTHON CHECKS
        - name: "lint Python test code on Python 3.7"
          language: python
          python: "3.7"
          install: pip3 install -r tests/client-dbus/requirements.txt
          before_script:
              - cd tests/client-dbus
          env: TASK=lint
        - name: "format Python test code on Python 3.7"
          language: python
          python: "3.7"
          install: pip3 install -r tests/client-dbus/requirements.txt
          before_script:
              - cd tests/client-dbus
          env: TASK=fmt-travis


        # INTERMITTENTLY ALLOWED FAILURES
        # Allowed if a failure occurs after a new Rust release until the
        # failure is addressed.
        - name: "lint Rust source using beta toolchain"
          rust: beta
          before_script:
              - rustup component add clippy
          env: TASK=clippy


        # ALLOWED FAILURES
        # Run audit on Rust stable.  Make it an allowed failure, because:
        # * It takes 9 minutes, the longest of any task.
        # * It should be an advisory, and should not gate our development.
        - name: "run Rust audit task using stable toolchain"
          rust: stable
          env: TASK=audit

branches:
    only: develop

script: make -f Makefile $TASK
